Terminals unused in grammar

   UNKNOWN


状态 1conflicts: 4 shift/reduce
状态 10conflicts: 1 shift/reduce
状态 23conflicts: 1 shift/reduce
状态 24conflicts: 1 shift/reduce
状态 26conflicts: 8 shift/reduce
状态 27conflicts: 2 shift/reduce
状态 32conflicts: 4 shift/reduce
状态 74conflicts: 8 reduce/reduce
状态 77conflicts: 4 shift/reduce
状态 88conflicts: 4 shift/reduce
状态 96conflicts: 1 shift/reduce
状态 98conflicts: 2 shift/reduce
状态 99conflicts: 2 shift/reduce
状态 100conflicts: 2 shift/reduce
状态 101conflicts: 2 shift/reduce
状态 102conflicts: 2 shift/reduce
状态 103conflicts: 2 shift/reduce
状态 104conflicts: 2 shift/reduce
状态 105conflicts: 2 shift/reduce
状态 113conflicts: 4 shift/reduce
状态 122conflicts: 1 shift/reduce
状态 143conflicts: 4 shift/reduce


语法

    0 $accept: program $end

    1 program: expression

    2 expression: no-value-expression
    3           | value-expression

    4 breakable-expression: BREAK
    5                     | expression

    6 no-value-expression: no-value-if-then-else
    7                    | if-then
    8                    | while
    9                    | for
   10                    | no-value-let-expression
   11                    | LPAREN semicolon-separated-expression-ended-with-value RPAREN
   12                    | assignment-expression

   13 no-value-if-then-else: IF value-expression THEN no-value-expression ELSE no-value-expression

   14 value-if-then-else: IF value-expression THEN value-expression ELSE value-expression

   15 if-then: IF value-expression THEN no-value-expression

   16 for: FOR IDENTIFIER ASSIGN value-expression TO value-expression DO breakable-expression

   17 while: WHILE value-expression DO breakable-expression

   18 value-let-expression: LET space-separated-declaration IN semicolon-separated-expression-ended-with-value END

   19 no-value-let-expression: LET space-separated-declaration IN nullable-semicolon-separated-expression-ended-with-no-value END
   20                        | LET space-separated-declaration IN semicolon-separated-expression-ended-with-no-value END

   21 semicolon-separated-expression-ended-with-value: value-expression
   22                                                | semicolon-separated-expression-ended-with-no-value SEMICOLON value-expression
   23                                                | semicolon-separated-expression-ended-with-value SEMICOLON value-expression

   24 semicolon-separated-expression-ended-with-no-value: nullable-semicolon-separated-expression-ended-with-no-value no-value-expression
   25                                                   | semicolon-separated-expression-ended-with-no-value SEMICOLON no-value-expression
   26                                                   | semicolon-separated-expression-ended-with-value SEMICOLON no-value-expression

   27 nullable-semicolon-separated-expression-ended-with-no-value: %empty

   28 assignment-expression: lvalue-expression ASSIGN value-expression

   29 value-expression: value-let-expression
   30                 | value-if-then-else
   31                 | logical-or-expression

   32 logical-or-expression: logical-and-expression
   33                      | logical-or-expression OR logical-and-expression

   34 logical-and-expression: equality-expression
   35                       | logical-and-expression AND equality-expression

   36 equality-expression: additive-expression
   37                    | additive-expression EQ additive-expression
   38                    | additive-expression NEQ additive-expression
   39                    | additive-expression LT additive-expression
   40                    | additive-expression LE additive-expression
   41                    | additive-expression GT additive-expression
   42                    | additive-expression GE additive-expression

   43 additive-expression: multiplicative-expression
   44                    | additive-expression PLUS multiplicative-expression
   45                    | additive-expression MINUS multiplicative-expression

   46 multiplicative-expression: unary-expression
   47                          | multiplicative-expression TIMES unary-expression
   48                          | multiplicative-expression DIVIDE unary-expression

   49 unary-expression: postfix-expression
   50                 | MINUS unary-expression

   51 postfix-expression: maybe-lvalue-expression
   52                   | STRING
   53                   | INT
   54                   | NIL
   55                   | LPAREN semicolon-separated-expression-ended-with-value RPAREN
   56                   | IDENTIFIER LPAREN comma-separated-value-expression RPAREN
   57                   | IDENTIFIER LBRACE comma-separated-record-field RBRACE

   58 maybe-lvalue-expression: IDENTIFIER LBRACKET value-expression RBRACKET
   59                        | IDENTIFIER LBRACKET value-expression RBRACKET OF value-expression
   60                        | lvalue-expression

   61 lvalue-expression: IDENTIFIER
   62                  | lvalue-expression LBRACKET value-expression RBRACKET
   63                  | lvalue-expression DOT IDENTIFIER

   64 comma-separated-record-field: IDENTIFIER EQ value-expression
   65                             | comma-separated-record-field COMMA IDENTIFIER EQ value-expression

   66 comma-separated-value-expression: value-expression
   67                                 | comma-separated-value-expression COMMA value-expression

   68 space-separated-declaration: declaration
   69                            | space-separated-declaration declaration

   70 declaration: function-declaration
   71            | variable-declaration
   72            | type-declaration

   73 type-declaration: TYPE IDENTIFIER EQ type

   74 type: IDENTIFIER
   75     | ARRAY OF IDENTIFIER
   76     | record-type

   77 record-type: LBRACE comma-separated-field RBRACE

   78 comma-separated-field: IDENTIFIER COLON IDENTIFIER
   79                      | comma-separated-field COMMA IDENTIFIER COLON IDENTIFIER

   80 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN COLON IDENTIFIER EQ value-expression
   81                     | FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN EQ expression

   82 nullable-comma-separated-parameter: %empty
   83                                   | comma-separated-parameter

   84 comma-separated-parameter: IDENTIFIER COLON IDENTIFIER
   85                          | comma-separated-parameter COMMA IDENTIFIER COLON IDENTIFIER

   86 variable-declaration: VAR IDENTIFIER nullable-colon-type ASSIGN value-expression

   87 nullable-colon-type: %empty
   88                    | COLON IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
LPAREN (258) 11 55 56 80 81
RPAREN (259) 11 55 56 80 81
LBRACKET (260) 58 59 62
RBRACKET (261) 58 59 62
LBRACE (262) 57 77
RBRACE (263) 57 77
ASSIGN (264) 16 28 86
COLON (265) 78 79 80 84 85 88
DOT (266) 63
COMMA (267) 65 67 79 85
SEMICOLON (268) 22 23 25 26
TIMES (269) 47
DIVIDE (270) 48
PLUS (271) 44
MINUS (272) 45 50
EQ (273) 37 64 65 73 80 81
NEQ (274) 38
GT (275) 41
LT (276) 39
GE (277) 42
LE (278) 40
AND (279) 35
OR (280) 33
ARRAY (281) 75
BREAK (282) 4
DO (283) 16 17
ELSE (284) 13 14
END (285) 18 19 20
FOR (286) 16
FUNCTION (287) 80 81
IF (288) 13 14 15
IN (289) 18 19 20
LET (290) 18 19 20
NIL (291) 54
OF (292) 59 75
THEN (293) 13 14 15
TO (294) 16
TYPE (295) 73
VAR (296) 86
WHILE (297) 17
UNKNOWN (298)
INT (299) 53
STRING (300) 52
IDENTIFIER (301) 16 56 57 58 59 61 63 64 65 73 74 75 78 79 80 81 84
    85 86 88


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
program (48)
    on left: 1, on right: 0
expression (49)
    on left: 2 3, on right: 1 5 81
breakable-expression (50)
    on left: 4 5, on right: 16 17
no-value-expression (51)
    on left: 6 7 8 9 10 11 12, on right: 2 13 15 24 25 26
no-value-if-then-else (52)
    on left: 13, on right: 6
value-if-then-else (53)
    on left: 14, on right: 30
if-then (54)
    on left: 15, on right: 7
for (55)
    on left: 16, on right: 9
while (56)
    on left: 17, on right: 8
value-let-expression (57)
    on left: 18, on right: 29
no-value-let-expression (58)
    on left: 19 20, on right: 10
semicolon-separated-expression-ended-with-value (59)
    on left: 21 22 23, on right: 11 18 23 26 55
semicolon-separated-expression-ended-with-no-value (60)
    on left: 24 25 26, on right: 20 22 25
nullable-semicolon-separated-expression-ended-with-no-value (61)
    on left: 27, on right: 19 24
assignment-expression (62)
    on left: 28, on right: 12
value-expression (63)
    on left: 29 30 31, on right: 3 13 14 15 16 17 21 22 23 28 58 59
    62 64 65 66 67 80 86
logical-or-expression (64)
    on left: 32 33, on right: 31 33
logical-and-expression (65)
    on left: 34 35, on right: 32 33 35
equality-expression (66)
    on left: 36 37 38 39 40 41 42, on right: 34 35
additive-expression (67)
    on left: 43 44 45, on right: 36 37 38 39 40 41 42 44 45
multiplicative-expression (68)
    on left: 46 47 48, on right: 43 44 45 47 48
unary-expression (69)
    on left: 49 50, on right: 46 47 48 50
postfix-expression (70)
    on left: 51 52 53 54 55 56 57, on right: 49
maybe-lvalue-expression (71)
    on left: 58 59 60, on right: 51
lvalue-expression (72)
    on left: 61 62 63, on right: 28 60 62 63
comma-separated-record-field (73)
    on left: 64 65, on right: 57 65
comma-separated-value-expression (74)
    on left: 66 67, on right: 56 67
space-separated-declaration (75)
    on left: 68 69, on right: 18 19 20 69
declaration (76)
    on left: 70 71 72, on right: 68 69
type-declaration (77)
    on left: 73, on right: 72
type (78)
    on left: 74 75 76, on right: 73
record-type (79)
    on left: 77, on right: 76
comma-separated-field (80)
    on left: 78 79, on right: 77 79
function-declaration (81)
    on left: 80 81, on right: 70
nullable-comma-separated-parameter (82)
    on left: 82 83, on right: 80 81
comma-separated-parameter (83)
    on left: 84 85, on right: 83 85
variable-declaration (84)
    on left: 86, on right: 71
nullable-colon-type (85)
    on left: 87 88, on right: 86


State 0

    0 $accept: . program $end

    LPAREN      shift, and go to state 1
    MINUS       shift, and go to state 2
    FOR         shift, and go to state 3
    IF          shift, and go to state 4
    LET         shift, and go to state 5
    NIL         shift, and go to state 6
    WHILE       shift, and go to state 7
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    program                    转到状态 11
    expression                 转到状态 12
    no-value-expression        转到状态 13
    no-value-if-then-else      转到状态 14
    value-if-then-else         转到状态 15
    if-then                    转到状态 16
    for                        转到状态 17
    while                      转到状态 18
    value-let-expression       转到状态 19
    no-value-let-expression    转到状态 20
    assignment-expression      转到状态 21
    value-expression           转到状态 22
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 31


State 1

   11 no-value-expression: LPAREN . semicolon-separated-expression-ended-with-value RPAREN
   55 postfix-expression: LPAREN . semicolon-separated-expression-ended-with-value RPAREN

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    LPAREN      [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IF          [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    LET         [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IDENTIFIER  [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    $default    reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)

    value-if-then-else                                           转到状态 15
    value-let-expression                                         转到状态 19
    semicolon-separated-expression-ended-with-value              转到状态 35
    semicolon-separated-expression-ended-with-no-value           转到状态 36
    nullable-semicolon-separated-expression-ended-with-no-value  转到状态 37
    value-expression                                             转到状态 38
    logical-or-expression                                        转到状态 23
    logical-and-expression                                       转到状态 24
    equality-expression                                          转到状态 25
    additive-expression                                          转到状态 26
    multiplicative-expression                                    转到状态 27
    unary-expression                                             转到状态 28
    postfix-expression                                           转到状态 29
    maybe-lvalue-expression                                      转到状态 30
    lvalue-expression                                            转到状态 39


State 2

   50 unary-expression: MINUS . unary-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    unary-expression         转到状态 40
    postfix-expression       转到状态 29
    maybe-lvalue-expression  转到状态 30
    lvalue-expression        转到状态 39


State 3

   16 for: FOR . IDENTIFIER ASSIGN value-expression TO value-expression DO breakable-expression

    IDENTIFIER  shift, and go to state 41


State 4

   13 no-value-if-then-else: IF . value-expression THEN no-value-expression ELSE no-value-expression
   14 value-if-then-else: IF . value-expression THEN value-expression ELSE value-expression
   15 if-then: IF . value-expression THEN no-value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 42
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 5

   18 value-let-expression: LET . space-separated-declaration IN semicolon-separated-expression-ended-with-value END
   19 no-value-let-expression: LET . space-separated-declaration IN nullable-semicolon-separated-expression-ended-with-no-value END
   20                        | LET . space-separated-declaration IN semicolon-separated-expression-ended-with-no-value END

    FUNCTION  shift, and go to state 43
    TYPE      shift, and go to state 44
    VAR       shift, and go to state 45

    space-separated-declaration  转到状态 46
    declaration                  转到状态 47
    type-declaration             转到状态 48
    function-declaration         转到状态 49
    variable-declaration         转到状态 50


State 6

   54 postfix-expression: NIL .

    $default  reduce using rule 54 (postfix-expression)


State 7

   17 while: WHILE . value-expression DO breakable-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 51
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 8

   53 postfix-expression: INT .

    $default  reduce using rule 53 (postfix-expression)


State 9

   52 postfix-expression: STRING .

    $default  reduce using rule 52 (postfix-expression)


State 10

   56 postfix-expression: IDENTIFIER . LPAREN comma-separated-value-expression RPAREN
   57                   | IDENTIFIER . LBRACE comma-separated-record-field RBRACE
   58 maybe-lvalue-expression: IDENTIFIER . LBRACKET value-expression RBRACKET
   59                        | IDENTIFIER . LBRACKET value-expression RBRACKET OF value-expression
   61 lvalue-expression: IDENTIFIER .

    LPAREN    shift, and go to state 52
    LBRACKET  shift, and go to state 53
    LBRACE    shift, and go to state 54

    LBRACKET  [reduce using rule 61 (lvalue-expression)]
    $default  reduce using rule 61 (lvalue-expression)


State 11

    0 $accept: program . $end

    $end  shift, and go to state 55


State 12

    1 program: expression .

    $default  reduce using rule 1 (program)


State 13

    2 expression: no-value-expression .

    $default  reduce using rule 2 (expression)


State 14

    6 no-value-expression: no-value-if-then-else .

    $default  reduce using rule 6 (no-value-expression)


State 15

   30 value-expression: value-if-then-else .

    $default  reduce using rule 30 (value-expression)


State 16

    7 no-value-expression: if-then .

    $default  reduce using rule 7 (no-value-expression)


State 17

    9 no-value-expression: for .

    $default  reduce using rule 9 (no-value-expression)


State 18

    8 no-value-expression: while .

    $default  reduce using rule 8 (no-value-expression)


State 19

   29 value-expression: value-let-expression .

    $default  reduce using rule 29 (value-expression)


State 20

   10 no-value-expression: no-value-let-expression .

    $default  reduce using rule 10 (no-value-expression)


State 21

   12 no-value-expression: assignment-expression .

    $default  reduce using rule 12 (no-value-expression)


State 22

    3 expression: value-expression .

    $default  reduce using rule 3 (expression)


State 23

   31 value-expression: logical-or-expression .
   33 logical-or-expression: logical-or-expression . OR logical-and-expression

    OR  shift, and go to state 56

    OR        [reduce using rule 31 (value-expression)]
    $default  reduce using rule 31 (value-expression)


State 24

   32 logical-or-expression: logical-and-expression .
   35 logical-and-expression: logical-and-expression . AND equality-expression

    AND  shift, and go to state 57

    AND       [reduce using rule 32 (logical-or-expression)]
    $default  reduce using rule 32 (logical-or-expression)


State 25

   34 logical-and-expression: equality-expression .

    $default  reduce using rule 34 (logical-and-expression)


State 26

   36 equality-expression: additive-expression .
   37                    | additive-expression . EQ additive-expression
   38                    | additive-expression . NEQ additive-expression
   39                    | additive-expression . LT additive-expression
   40                    | additive-expression . LE additive-expression
   41                    | additive-expression . GT additive-expression
   42                    | additive-expression . GE additive-expression
   44 additive-expression: additive-expression . PLUS multiplicative-expression
   45                    | additive-expression . MINUS multiplicative-expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59
    EQ     shift, and go to state 60
    NEQ    shift, and go to state 61
    GT     shift, and go to state 62
    LT     shift, and go to state 63
    GE     shift, and go to state 64
    LE     shift, and go to state 65

    PLUS      [reduce using rule 36 (equality-expression)]
    MINUS     [reduce using rule 36 (equality-expression)]
    EQ        [reduce using rule 36 (equality-expression)]
    NEQ       [reduce using rule 36 (equality-expression)]
    GT        [reduce using rule 36 (equality-expression)]
    LT        [reduce using rule 36 (equality-expression)]
    GE        [reduce using rule 36 (equality-expression)]
    LE        [reduce using rule 36 (equality-expression)]
    $default  reduce using rule 36 (equality-expression)


State 27

   43 additive-expression: multiplicative-expression .
   47 multiplicative-expression: multiplicative-expression . TIMES unary-expression
   48                          | multiplicative-expression . DIVIDE unary-expression

    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    TIMES     [reduce using rule 43 (additive-expression)]
    DIVIDE    [reduce using rule 43 (additive-expression)]
    $default  reduce using rule 43 (additive-expression)


State 28

   46 multiplicative-expression: unary-expression .

    $default  reduce using rule 46 (multiplicative-expression)


State 29

   49 unary-expression: postfix-expression .

    $default  reduce using rule 49 (unary-expression)


State 30

   51 postfix-expression: maybe-lvalue-expression .

    $default  reduce using rule 51 (postfix-expression)


State 31

   28 assignment-expression: lvalue-expression . ASSIGN value-expression
   60 maybe-lvalue-expression: lvalue-expression .
   62 lvalue-expression: lvalue-expression . LBRACKET value-expression RBRACKET
   63                  | lvalue-expression . DOT IDENTIFIER

    LBRACKET  shift, and go to state 68
    ASSIGN    shift, and go to state 69
    DOT       shift, and go to state 70

    $default  reduce using rule 60 (maybe-lvalue-expression)


State 32

   55 postfix-expression: LPAREN . semicolon-separated-expression-ended-with-value RPAREN

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    LPAREN      [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IF          [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    LET         [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IDENTIFIER  [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    $default    reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)

    value-if-then-else                                           转到状态 15
    value-let-expression                                         转到状态 19
    semicolon-separated-expression-ended-with-value              转到状态 71
    semicolon-separated-expression-ended-with-no-value           转到状态 36
    nullable-semicolon-separated-expression-ended-with-no-value  转到状态 37
    value-expression                                             转到状态 38
    logical-or-expression                                        转到状态 23
    logical-and-expression                                       转到状态 24
    equality-expression                                          转到状态 25
    additive-expression                                          转到状态 26
    multiplicative-expression                                    转到状态 27
    unary-expression                                             转到状态 28
    postfix-expression                                           转到状态 29
    maybe-lvalue-expression                                      转到状态 30
    lvalue-expression                                            转到状态 39


State 33

   14 value-if-then-else: IF . value-expression THEN value-expression ELSE value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 72
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 34

   18 value-let-expression: LET . space-separated-declaration IN semicolon-separated-expression-ended-with-value END

    FUNCTION  shift, and go to state 43
    TYPE      shift, and go to state 44
    VAR       shift, and go to state 45

    space-separated-declaration  转到状态 73
    declaration                  转到状态 47
    type-declaration             转到状态 48
    function-declaration         转到状态 49
    variable-declaration         转到状态 50


State 35

   11 no-value-expression: LPAREN semicolon-separated-expression-ended-with-value . RPAREN
   23 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-value . SEMICOLON value-expression
   26 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-value . SEMICOLON no-value-expression
   55 postfix-expression: LPAREN semicolon-separated-expression-ended-with-value . RPAREN

    RPAREN     shift, and go to state 74
    SEMICOLON  shift, and go to state 75


State 36

   22 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-no-value . SEMICOLON value-expression
   25 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-no-value . SEMICOLON no-value-expression

    SEMICOLON  shift, and go to state 76


State 37

   24 semicolon-separated-expression-ended-with-no-value: nullable-semicolon-separated-expression-ended-with-no-value . no-value-expression

    LPAREN      shift, and go to state 77
    FOR         shift, and go to state 3
    IF          shift, and go to state 78
    LET         shift, and go to state 79
    WHILE       shift, and go to state 7
    IDENTIFIER  shift, and go to state 80

    no-value-expression      转到状态 81
    no-value-if-then-else    转到状态 14
    if-then                  转到状态 16
    for                      转到状态 17
    while                    转到状态 18
    no-value-let-expression  转到状态 20
    assignment-expression    转到状态 21
    lvalue-expression        转到状态 82


State 38

   21 semicolon-separated-expression-ended-with-value: value-expression .

    $default  reduce using rule 21 (semicolon-separated-expression-ended-with-value)


State 39

   60 maybe-lvalue-expression: lvalue-expression .
   62 lvalue-expression: lvalue-expression . LBRACKET value-expression RBRACKET
   63                  | lvalue-expression . DOT IDENTIFIER

    LBRACKET  shift, and go to state 68
    DOT       shift, and go to state 70

    $default  reduce using rule 60 (maybe-lvalue-expression)


State 40

   50 unary-expression: MINUS unary-expression .

    $default  reduce using rule 50 (unary-expression)


State 41

   16 for: FOR IDENTIFIER . ASSIGN value-expression TO value-expression DO breakable-expression

    ASSIGN  shift, and go to state 83


State 42

   13 no-value-if-then-else: IF value-expression . THEN no-value-expression ELSE no-value-expression
   14 value-if-then-else: IF value-expression . THEN value-expression ELSE value-expression
   15 if-then: IF value-expression . THEN no-value-expression

    THEN  shift, and go to state 84


State 43

   80 function-declaration: FUNCTION . IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN COLON IDENTIFIER EQ value-expression
   81                     | FUNCTION . IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN EQ expression

    IDENTIFIER  shift, and go to state 85


State 44

   73 type-declaration: TYPE . IDENTIFIER EQ type

    IDENTIFIER  shift, and go to state 86


State 45

   86 variable-declaration: VAR . IDENTIFIER nullable-colon-type ASSIGN value-expression

    IDENTIFIER  shift, and go to state 87


State 46

   18 value-let-expression: LET space-separated-declaration . IN semicolon-separated-expression-ended-with-value END
   19 no-value-let-expression: LET space-separated-declaration . IN nullable-semicolon-separated-expression-ended-with-no-value END
   20                        | LET space-separated-declaration . IN semicolon-separated-expression-ended-with-no-value END
   69 space-separated-declaration: space-separated-declaration . declaration

    FUNCTION  shift, and go to state 43
    IN        shift, and go to state 88
    TYPE      shift, and go to state 44
    VAR       shift, and go to state 45

    declaration           转到状态 89
    type-declaration      转到状态 48
    function-declaration  转到状态 49
    variable-declaration  转到状态 50


State 47

   68 space-separated-declaration: declaration .

    $default  reduce using rule 68 (space-separated-declaration)


State 48

   72 declaration: type-declaration .

    $default  reduce using rule 72 (declaration)


State 49

   70 declaration: function-declaration .

    $default  reduce using rule 70 (declaration)


State 50

   71 declaration: variable-declaration .

    $default  reduce using rule 71 (declaration)


State 51

   17 while: WHILE value-expression . DO breakable-expression

    DO  shift, and go to state 90


State 52

   56 postfix-expression: IDENTIFIER LPAREN . comma-separated-value-expression RPAREN

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else                转到状态 15
    value-let-expression              转到状态 19
    value-expression                  转到状态 91
    logical-or-expression             转到状态 23
    logical-and-expression            转到状态 24
    equality-expression               转到状态 25
    additive-expression               转到状态 26
    multiplicative-expression         转到状态 27
    unary-expression                  转到状态 28
    postfix-expression                转到状态 29
    maybe-lvalue-expression           转到状态 30
    lvalue-expression                 转到状态 39
    comma-separated-value-expression  转到状态 92


State 53

   58 maybe-lvalue-expression: IDENTIFIER LBRACKET . value-expression RBRACKET
   59                        | IDENTIFIER LBRACKET . value-expression RBRACKET OF value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 93
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 54

   57 postfix-expression: IDENTIFIER LBRACE . comma-separated-record-field RBRACE

    IDENTIFIER  shift, and go to state 94

    comma-separated-record-field  转到状态 95


State 55

    0 $accept: program $end .

    $default  接受


State 56

   33 logical-or-expression: logical-or-expression OR . logical-and-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    logical-and-expression     转到状态 96
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 57

   35 logical-and-expression: logical-and-expression AND . equality-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    equality-expression        转到状态 97
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 58

   44 additive-expression: additive-expression PLUS . multiplicative-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    multiplicative-expression  转到状态 98
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 59

   45 additive-expression: additive-expression MINUS . multiplicative-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    multiplicative-expression  转到状态 99
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 60

   37 equality-expression: additive-expression EQ . additive-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    additive-expression        转到状态 100
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 61

   38 equality-expression: additive-expression NEQ . additive-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    additive-expression        转到状态 101
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 62

   41 equality-expression: additive-expression GT . additive-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    additive-expression        转到状态 102
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 63

   39 equality-expression: additive-expression LT . additive-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    additive-expression        转到状态 103
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 64

   42 equality-expression: additive-expression GE . additive-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    additive-expression        转到状态 104
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 65

   40 equality-expression: additive-expression LE . additive-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    additive-expression        转到状态 105
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 66

   47 multiplicative-expression: multiplicative-expression TIMES . unary-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    unary-expression         转到状态 106
    postfix-expression       转到状态 29
    maybe-lvalue-expression  转到状态 30
    lvalue-expression        转到状态 39


State 67

   48 multiplicative-expression: multiplicative-expression DIVIDE . unary-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    unary-expression         转到状态 107
    postfix-expression       转到状态 29
    maybe-lvalue-expression  转到状态 30
    lvalue-expression        转到状态 39


State 68

   62 lvalue-expression: lvalue-expression LBRACKET . value-expression RBRACKET

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 108
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 69

   28 assignment-expression: lvalue-expression ASSIGN . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 109
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 70

   63 lvalue-expression: lvalue-expression DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 110


State 71

   23 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-value . SEMICOLON value-expression
   26 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-value . SEMICOLON no-value-expression
   55 postfix-expression: LPAREN semicolon-separated-expression-ended-with-value . RPAREN

    RPAREN     shift, and go to state 111
    SEMICOLON  shift, and go to state 75


State 72

   14 value-if-then-else: IF value-expression . THEN value-expression ELSE value-expression

    THEN  shift, and go to state 112


State 73

   18 value-let-expression: LET space-separated-declaration . IN semicolon-separated-expression-ended-with-value END
   69 space-separated-declaration: space-separated-declaration . declaration

    FUNCTION  shift, and go to state 43
    IN        shift, and go to state 113
    TYPE      shift, and go to state 44
    VAR       shift, and go to state 45

    declaration           转到状态 89
    type-declaration      转到状态 48
    function-declaration  转到状态 49
    variable-declaration  转到状态 50


State 74

   11 no-value-expression: LPAREN semicolon-separated-expression-ended-with-value RPAREN .
   55 postfix-expression: LPAREN semicolon-separated-expression-ended-with-value RPAREN .

    $end       reduce using rule 11 (no-value-expression)
    $end       [reduce using rule 55 (postfix-expression)]
    SEMICOLON  reduce using rule 11 (no-value-expression)
    SEMICOLON  [reduce using rule 55 (postfix-expression)]
    ELSE       reduce using rule 11 (no-value-expression)
    ELSE       [reduce using rule 55 (postfix-expression)]
    END        reduce using rule 11 (no-value-expression)
    END        [reduce using rule 55 (postfix-expression)]
    FUNCTION   reduce using rule 11 (no-value-expression)
    FUNCTION   [reduce using rule 55 (postfix-expression)]
    IN         reduce using rule 11 (no-value-expression)
    IN         [reduce using rule 55 (postfix-expression)]
    TYPE       reduce using rule 11 (no-value-expression)
    TYPE       [reduce using rule 55 (postfix-expression)]
    VAR        reduce using rule 11 (no-value-expression)
    VAR        [reduce using rule 55 (postfix-expression)]
    $default   reduce using rule 55 (postfix-expression)


State 75

   23 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-value SEMICOLON . value-expression
   26 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-value SEMICOLON . no-value-expression

    LPAREN      shift, and go to state 1
    MINUS       shift, and go to state 2
    FOR         shift, and go to state 3
    IF          shift, and go to state 4
    LET         shift, and go to state 5
    NIL         shift, and go to state 6
    WHILE       shift, and go to state 7
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    no-value-expression        转到状态 114
    no-value-if-then-else      转到状态 14
    value-if-then-else         转到状态 15
    if-then                    转到状态 16
    for                        转到状态 17
    while                      转到状态 18
    value-let-expression       转到状态 19
    no-value-let-expression    转到状态 20
    assignment-expression      转到状态 21
    value-expression           转到状态 115
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 31


State 76

   22 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-no-value SEMICOLON . value-expression
   25 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-no-value SEMICOLON . no-value-expression

    LPAREN      shift, and go to state 1
    MINUS       shift, and go to state 2
    FOR         shift, and go to state 3
    IF          shift, and go to state 4
    LET         shift, and go to state 5
    NIL         shift, and go to state 6
    WHILE       shift, and go to state 7
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    no-value-expression        转到状态 116
    no-value-if-then-else      转到状态 14
    value-if-then-else         转到状态 15
    if-then                    转到状态 16
    for                        转到状态 17
    while                      转到状态 18
    value-let-expression       转到状态 19
    no-value-let-expression    转到状态 20
    assignment-expression      转到状态 21
    value-expression           转到状态 117
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 31


State 77

   11 no-value-expression: LPAREN . semicolon-separated-expression-ended-with-value RPAREN

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    LPAREN      [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IF          [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    LET         [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IDENTIFIER  [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    $default    reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)

    value-if-then-else                                           转到状态 15
    value-let-expression                                         转到状态 19
    semicolon-separated-expression-ended-with-value              转到状态 118
    semicolon-separated-expression-ended-with-no-value           转到状态 36
    nullable-semicolon-separated-expression-ended-with-no-value  转到状态 37
    value-expression                                             转到状态 38
    logical-or-expression                                        转到状态 23
    logical-and-expression                                       转到状态 24
    equality-expression                                          转到状态 25
    additive-expression                                          转到状态 26
    multiplicative-expression                                    转到状态 27
    unary-expression                                             转到状态 28
    postfix-expression                                           转到状态 29
    maybe-lvalue-expression                                      转到状态 30
    lvalue-expression                                            转到状态 39


State 78

   13 no-value-if-then-else: IF . value-expression THEN no-value-expression ELSE no-value-expression
   15 if-then: IF . value-expression THEN no-value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 119
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 79

   19 no-value-let-expression: LET . space-separated-declaration IN nullable-semicolon-separated-expression-ended-with-no-value END
   20                        | LET . space-separated-declaration IN semicolon-separated-expression-ended-with-no-value END

    FUNCTION  shift, and go to state 43
    TYPE      shift, and go to state 44
    VAR       shift, and go to state 45

    space-separated-declaration  转到状态 120
    declaration                  转到状态 47
    type-declaration             转到状态 48
    function-declaration         转到状态 49
    variable-declaration         转到状态 50


State 80

   61 lvalue-expression: IDENTIFIER .

    $default  reduce using rule 61 (lvalue-expression)


State 81

   24 semicolon-separated-expression-ended-with-no-value: nullable-semicolon-separated-expression-ended-with-no-value no-value-expression .

    $default  reduce using rule 24 (semicolon-separated-expression-ended-with-no-value)


State 82

   28 assignment-expression: lvalue-expression . ASSIGN value-expression
   62 lvalue-expression: lvalue-expression . LBRACKET value-expression RBRACKET
   63                  | lvalue-expression . DOT IDENTIFIER

    LBRACKET  shift, and go to state 68
    ASSIGN    shift, and go to state 69
    DOT       shift, and go to state 70


State 83

   16 for: FOR IDENTIFIER ASSIGN . value-expression TO value-expression DO breakable-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 121
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 84

   13 no-value-if-then-else: IF value-expression THEN . no-value-expression ELSE no-value-expression
   14 value-if-then-else: IF value-expression THEN . value-expression ELSE value-expression
   15 if-then: IF value-expression THEN . no-value-expression

    LPAREN      shift, and go to state 1
    MINUS       shift, and go to state 2
    FOR         shift, and go to state 3
    IF          shift, and go to state 4
    LET         shift, and go to state 5
    NIL         shift, and go to state 6
    WHILE       shift, and go to state 7
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    no-value-expression        转到状态 122
    no-value-if-then-else      转到状态 14
    value-if-then-else         转到状态 15
    if-then                    转到状态 16
    for                        转到状态 17
    while                      转到状态 18
    value-let-expression       转到状态 19
    no-value-let-expression    转到状态 20
    assignment-expression      转到状态 21
    value-expression           转到状态 123
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 31


State 85

   80 function-declaration: FUNCTION IDENTIFIER . LPAREN nullable-comma-separated-parameter RPAREN COLON IDENTIFIER EQ value-expression
   81                     | FUNCTION IDENTIFIER . LPAREN nullable-comma-separated-parameter RPAREN EQ expression

    LPAREN  shift, and go to state 124


State 86

   73 type-declaration: TYPE IDENTIFIER . EQ type

    EQ  shift, and go to state 125


State 87

   86 variable-declaration: VAR IDENTIFIER . nullable-colon-type ASSIGN value-expression

    COLON  shift, and go to state 126

    $default  reduce using rule 87 (nullable-colon-type)

    nullable-colon-type  转到状态 127


State 88

   18 value-let-expression: LET space-separated-declaration IN . semicolon-separated-expression-ended-with-value END
   19 no-value-let-expression: LET space-separated-declaration IN . nullable-semicolon-separated-expression-ended-with-no-value END
   20                        | LET space-separated-declaration IN . semicolon-separated-expression-ended-with-no-value END

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    LPAREN      [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IF          [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    LET         [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IDENTIFIER  [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    $default    reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)

    value-if-then-else                                           转到状态 15
    value-let-expression                                         转到状态 19
    semicolon-separated-expression-ended-with-value              转到状态 128
    semicolon-separated-expression-ended-with-no-value           转到状态 129
    nullable-semicolon-separated-expression-ended-with-no-value  转到状态 130
    value-expression                                             转到状态 38
    logical-or-expression                                        转到状态 23
    logical-and-expression                                       转到状态 24
    equality-expression                                          转到状态 25
    additive-expression                                          转到状态 26
    multiplicative-expression                                    转到状态 27
    unary-expression                                             转到状态 28
    postfix-expression                                           转到状态 29
    maybe-lvalue-expression                                      转到状态 30
    lvalue-expression                                            转到状态 39


State 89

   69 space-separated-declaration: space-separated-declaration declaration .

    $default  reduce using rule 69 (space-separated-declaration)


State 90

   17 while: WHILE value-expression DO . breakable-expression

    LPAREN      shift, and go to state 1
    MINUS       shift, and go to state 2
    BREAK       shift, and go to state 131
    FOR         shift, and go to state 3
    IF          shift, and go to state 4
    LET         shift, and go to state 5
    NIL         shift, and go to state 6
    WHILE       shift, and go to state 7
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    expression                 转到状态 132
    breakable-expression       转到状态 133
    no-value-expression        转到状态 13
    no-value-if-then-else      转到状态 14
    value-if-then-else         转到状态 15
    if-then                    转到状态 16
    for                        转到状态 17
    while                      转到状态 18
    value-let-expression       转到状态 19
    no-value-let-expression    转到状态 20
    assignment-expression      转到状态 21
    value-expression           转到状态 22
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 31


State 91

   66 comma-separated-value-expression: value-expression .

    $default  reduce using rule 66 (comma-separated-value-expression)


State 92

   56 postfix-expression: IDENTIFIER LPAREN comma-separated-value-expression . RPAREN
   67 comma-separated-value-expression: comma-separated-value-expression . COMMA value-expression

    RPAREN  shift, and go to state 134
    COMMA   shift, and go to state 135


State 93

   58 maybe-lvalue-expression: IDENTIFIER LBRACKET value-expression . RBRACKET
   59                        | IDENTIFIER LBRACKET value-expression . RBRACKET OF value-expression

    RBRACKET  shift, and go to state 136


State 94

   64 comma-separated-record-field: IDENTIFIER . EQ value-expression

    EQ  shift, and go to state 137


State 95

   57 postfix-expression: IDENTIFIER LBRACE comma-separated-record-field . RBRACE
   65 comma-separated-record-field: comma-separated-record-field . COMMA IDENTIFIER EQ value-expression

    RBRACE  shift, and go to state 138
    COMMA   shift, and go to state 139


State 96

   33 logical-or-expression: logical-or-expression OR logical-and-expression .
   35 logical-and-expression: logical-and-expression . AND equality-expression

    AND  shift, and go to state 57

    AND       [reduce using rule 33 (logical-or-expression)]
    $default  reduce using rule 33 (logical-or-expression)


State 97

   35 logical-and-expression: logical-and-expression AND equality-expression .

    $default  reduce using rule 35 (logical-and-expression)


State 98

   44 additive-expression: additive-expression PLUS multiplicative-expression .
   47 multiplicative-expression: multiplicative-expression . TIMES unary-expression
   48                          | multiplicative-expression . DIVIDE unary-expression

    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    TIMES     [reduce using rule 44 (additive-expression)]
    DIVIDE    [reduce using rule 44 (additive-expression)]
    $default  reduce using rule 44 (additive-expression)


State 99

   45 additive-expression: additive-expression MINUS multiplicative-expression .
   47 multiplicative-expression: multiplicative-expression . TIMES unary-expression
   48                          | multiplicative-expression . DIVIDE unary-expression

    TIMES   shift, and go to state 66
    DIVIDE  shift, and go to state 67

    TIMES     [reduce using rule 45 (additive-expression)]
    DIVIDE    [reduce using rule 45 (additive-expression)]
    $default  reduce using rule 45 (additive-expression)


State 100

   37 equality-expression: additive-expression EQ additive-expression .
   44 additive-expression: additive-expression . PLUS multiplicative-expression
   45                    | additive-expression . MINUS multiplicative-expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    PLUS      [reduce using rule 37 (equality-expression)]
    MINUS     [reduce using rule 37 (equality-expression)]
    $default  reduce using rule 37 (equality-expression)


State 101

   38 equality-expression: additive-expression NEQ additive-expression .
   44 additive-expression: additive-expression . PLUS multiplicative-expression
   45                    | additive-expression . MINUS multiplicative-expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    PLUS      [reduce using rule 38 (equality-expression)]
    MINUS     [reduce using rule 38 (equality-expression)]
    $default  reduce using rule 38 (equality-expression)


State 102

   41 equality-expression: additive-expression GT additive-expression .
   44 additive-expression: additive-expression . PLUS multiplicative-expression
   45                    | additive-expression . MINUS multiplicative-expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    PLUS      [reduce using rule 41 (equality-expression)]
    MINUS     [reduce using rule 41 (equality-expression)]
    $default  reduce using rule 41 (equality-expression)


State 103

   39 equality-expression: additive-expression LT additive-expression .
   44 additive-expression: additive-expression . PLUS multiplicative-expression
   45                    | additive-expression . MINUS multiplicative-expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    PLUS      [reduce using rule 39 (equality-expression)]
    MINUS     [reduce using rule 39 (equality-expression)]
    $default  reduce using rule 39 (equality-expression)


State 104

   42 equality-expression: additive-expression GE additive-expression .
   44 additive-expression: additive-expression . PLUS multiplicative-expression
   45                    | additive-expression . MINUS multiplicative-expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    PLUS      [reduce using rule 42 (equality-expression)]
    MINUS     [reduce using rule 42 (equality-expression)]
    $default  reduce using rule 42 (equality-expression)


State 105

   40 equality-expression: additive-expression LE additive-expression .
   44 additive-expression: additive-expression . PLUS multiplicative-expression
   45                    | additive-expression . MINUS multiplicative-expression

    PLUS   shift, and go to state 58
    MINUS  shift, and go to state 59

    PLUS      [reduce using rule 40 (equality-expression)]
    MINUS     [reduce using rule 40 (equality-expression)]
    $default  reduce using rule 40 (equality-expression)


State 106

   47 multiplicative-expression: multiplicative-expression TIMES unary-expression .

    $default  reduce using rule 47 (multiplicative-expression)


State 107

   48 multiplicative-expression: multiplicative-expression DIVIDE unary-expression .

    $default  reduce using rule 48 (multiplicative-expression)


State 108

   62 lvalue-expression: lvalue-expression LBRACKET value-expression . RBRACKET

    RBRACKET  shift, and go to state 140


State 109

   28 assignment-expression: lvalue-expression ASSIGN value-expression .

    $default  reduce using rule 28 (assignment-expression)


State 110

   63 lvalue-expression: lvalue-expression DOT IDENTIFIER .

    $default  reduce using rule 63 (lvalue-expression)


State 111

   55 postfix-expression: LPAREN semicolon-separated-expression-ended-with-value RPAREN .

    $default  reduce using rule 55 (postfix-expression)


State 112

   14 value-if-then-else: IF value-expression THEN . value-expression ELSE value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 123
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 113

   18 value-let-expression: LET space-separated-declaration IN . semicolon-separated-expression-ended-with-value END

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    LPAREN      [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IF          [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    LET         [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IDENTIFIER  [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    $default    reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)

    value-if-then-else                                           转到状态 15
    value-let-expression                                         转到状态 19
    semicolon-separated-expression-ended-with-value              转到状态 128
    semicolon-separated-expression-ended-with-no-value           转到状态 36
    nullable-semicolon-separated-expression-ended-with-no-value  转到状态 37
    value-expression                                             转到状态 38
    logical-or-expression                                        转到状态 23
    logical-and-expression                                       转到状态 24
    equality-expression                                          转到状态 25
    additive-expression                                          转到状态 26
    multiplicative-expression                                    转到状态 27
    unary-expression                                             转到状态 28
    postfix-expression                                           转到状态 29
    maybe-lvalue-expression                                      转到状态 30
    lvalue-expression                                            转到状态 39


State 114

   26 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-value SEMICOLON no-value-expression .

    $default  reduce using rule 26 (semicolon-separated-expression-ended-with-no-value)


State 115

   23 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-value SEMICOLON value-expression .

    $default  reduce using rule 23 (semicolon-separated-expression-ended-with-value)


State 116

   25 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-no-value SEMICOLON no-value-expression .

    $default  reduce using rule 25 (semicolon-separated-expression-ended-with-no-value)


State 117

   22 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-no-value SEMICOLON value-expression .

    $default  reduce using rule 22 (semicolon-separated-expression-ended-with-value)


State 118

   11 no-value-expression: LPAREN semicolon-separated-expression-ended-with-value . RPAREN
   23 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-value . SEMICOLON value-expression
   26 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-value . SEMICOLON no-value-expression

    RPAREN     shift, and go to state 141
    SEMICOLON  shift, and go to state 75


State 119

   13 no-value-if-then-else: IF value-expression . THEN no-value-expression ELSE no-value-expression
   15 if-then: IF value-expression . THEN no-value-expression

    THEN  shift, and go to state 142


State 120

   19 no-value-let-expression: LET space-separated-declaration . IN nullable-semicolon-separated-expression-ended-with-no-value END
   20                        | LET space-separated-declaration . IN semicolon-separated-expression-ended-with-no-value END
   69 space-separated-declaration: space-separated-declaration . declaration

    FUNCTION  shift, and go to state 43
    IN        shift, and go to state 143
    TYPE      shift, and go to state 44
    VAR       shift, and go to state 45

    declaration           转到状态 89
    type-declaration      转到状态 48
    function-declaration  转到状态 49
    variable-declaration  转到状态 50


State 121

   16 for: FOR IDENTIFIER ASSIGN value-expression . TO value-expression DO breakable-expression

    TO  shift, and go to state 144


State 122

   13 no-value-if-then-else: IF value-expression THEN no-value-expression . ELSE no-value-expression
   15 if-then: IF value-expression THEN no-value-expression .

    ELSE  shift, and go to state 145

    ELSE      [reduce using rule 15 (if-then)]
    $default  reduce using rule 15 (if-then)


State 123

   14 value-if-then-else: IF value-expression THEN value-expression . ELSE value-expression

    ELSE  shift, and go to state 146


State 124

   80 function-declaration: FUNCTION IDENTIFIER LPAREN . nullable-comma-separated-parameter RPAREN COLON IDENTIFIER EQ value-expression
   81                     | FUNCTION IDENTIFIER LPAREN . nullable-comma-separated-parameter RPAREN EQ expression

    IDENTIFIER  shift, and go to state 147

    $default  reduce using rule 82 (nullable-comma-separated-parameter)

    nullable-comma-separated-parameter  转到状态 148
    comma-separated-parameter           转到状态 149


State 125

   73 type-declaration: TYPE IDENTIFIER EQ . type

    LBRACE      shift, and go to state 150
    ARRAY       shift, and go to state 151
    IDENTIFIER  shift, and go to state 152

    type         转到状态 153
    record-type  转到状态 154


State 126

   88 nullable-colon-type: COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 155


State 127

   86 variable-declaration: VAR IDENTIFIER nullable-colon-type . ASSIGN value-expression

    ASSIGN  shift, and go to state 156


State 128

   18 value-let-expression: LET space-separated-declaration IN semicolon-separated-expression-ended-with-value . END
   23 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-value . SEMICOLON value-expression
   26 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-value . SEMICOLON no-value-expression

    SEMICOLON  shift, and go to state 75
    END        shift, and go to state 157


State 129

   20 no-value-let-expression: LET space-separated-declaration IN semicolon-separated-expression-ended-with-no-value . END
   22 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-no-value . SEMICOLON value-expression
   25 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-no-value . SEMICOLON no-value-expression

    SEMICOLON  shift, and go to state 76
    END        shift, and go to state 158


State 130

   19 no-value-let-expression: LET space-separated-declaration IN nullable-semicolon-separated-expression-ended-with-no-value . END
   24 semicolon-separated-expression-ended-with-no-value: nullable-semicolon-separated-expression-ended-with-no-value . no-value-expression

    LPAREN      shift, and go to state 77
    END         shift, and go to state 159
    FOR         shift, and go to state 3
    IF          shift, and go to state 78
    LET         shift, and go to state 79
    WHILE       shift, and go to state 7
    IDENTIFIER  shift, and go to state 80

    no-value-expression      转到状态 81
    no-value-if-then-else    转到状态 14
    if-then                  转到状态 16
    for                      转到状态 17
    while                    转到状态 18
    no-value-let-expression  转到状态 20
    assignment-expression    转到状态 21
    lvalue-expression        转到状态 82


State 131

    4 breakable-expression: BREAK .

    $default  reduce using rule 4 (breakable-expression)


State 132

    5 breakable-expression: expression .

    $default  reduce using rule 5 (breakable-expression)


State 133

   17 while: WHILE value-expression DO breakable-expression .

    $default  reduce using rule 17 (while)


State 134

   56 postfix-expression: IDENTIFIER LPAREN comma-separated-value-expression RPAREN .

    $default  reduce using rule 56 (postfix-expression)


State 135

   67 comma-separated-value-expression: comma-separated-value-expression COMMA . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 160
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 136

   58 maybe-lvalue-expression: IDENTIFIER LBRACKET value-expression RBRACKET .
   59                        | IDENTIFIER LBRACKET value-expression RBRACKET . OF value-expression

    OF  shift, and go to state 161

    $default  reduce using rule 58 (maybe-lvalue-expression)


State 137

   64 comma-separated-record-field: IDENTIFIER EQ . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 162
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 138

   57 postfix-expression: IDENTIFIER LBRACE comma-separated-record-field RBRACE .

    $default  reduce using rule 57 (postfix-expression)


State 139

   65 comma-separated-record-field: comma-separated-record-field COMMA . IDENTIFIER EQ value-expression

    IDENTIFIER  shift, and go to state 163


State 140

   62 lvalue-expression: lvalue-expression LBRACKET value-expression RBRACKET .

    $default  reduce using rule 62 (lvalue-expression)


State 141

   11 no-value-expression: LPAREN semicolon-separated-expression-ended-with-value RPAREN .

    $default  reduce using rule 11 (no-value-expression)


State 142

   13 no-value-if-then-else: IF value-expression THEN . no-value-expression ELSE no-value-expression
   15 if-then: IF value-expression THEN . no-value-expression

    LPAREN      shift, and go to state 77
    FOR         shift, and go to state 3
    IF          shift, and go to state 78
    LET         shift, and go to state 79
    WHILE       shift, and go to state 7
    IDENTIFIER  shift, and go to state 80

    no-value-expression      转到状态 122
    no-value-if-then-else    转到状态 14
    if-then                  转到状态 16
    for                      转到状态 17
    while                    转到状态 18
    no-value-let-expression  转到状态 20
    assignment-expression    转到状态 21
    lvalue-expression        转到状态 82


State 143

   19 no-value-let-expression: LET space-separated-declaration IN . nullable-semicolon-separated-expression-ended-with-no-value END
   20                        | LET space-separated-declaration IN . semicolon-separated-expression-ended-with-no-value END

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    LPAREN      [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IF          [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    LET         [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    IDENTIFIER  [reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)]
    $default    reduce using rule 27 (nullable-semicolon-separated-expression-ended-with-no-value)

    value-if-then-else                                           转到状态 15
    value-let-expression                                         转到状态 19
    semicolon-separated-expression-ended-with-value              转到状态 164
    semicolon-separated-expression-ended-with-no-value           转到状态 129
    nullable-semicolon-separated-expression-ended-with-no-value  转到状态 130
    value-expression                                             转到状态 38
    logical-or-expression                                        转到状态 23
    logical-and-expression                                       转到状态 24
    equality-expression                                          转到状态 25
    additive-expression                                          转到状态 26
    multiplicative-expression                                    转到状态 27
    unary-expression                                             转到状态 28
    postfix-expression                                           转到状态 29
    maybe-lvalue-expression                                      转到状态 30
    lvalue-expression                                            转到状态 39


State 144

   16 for: FOR IDENTIFIER ASSIGN value-expression TO . value-expression DO breakable-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 165
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 145

   13 no-value-if-then-else: IF value-expression THEN no-value-expression ELSE . no-value-expression

    LPAREN      shift, and go to state 77
    FOR         shift, and go to state 3
    IF          shift, and go to state 78
    LET         shift, and go to state 79
    WHILE       shift, and go to state 7
    IDENTIFIER  shift, and go to state 80

    no-value-expression      转到状态 166
    no-value-if-then-else    转到状态 14
    if-then                  转到状态 16
    for                      转到状态 17
    while                    转到状态 18
    no-value-let-expression  转到状态 20
    assignment-expression    转到状态 21
    lvalue-expression        转到状态 82


State 146

   14 value-if-then-else: IF value-expression THEN value-expression ELSE . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 167
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 147

   84 comma-separated-parameter: IDENTIFIER . COLON IDENTIFIER

    COLON  shift, and go to state 168


State 148

   80 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter . RPAREN COLON IDENTIFIER EQ value-expression
   81                     | FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter . RPAREN EQ expression

    RPAREN  shift, and go to state 169


State 149

   83 nullable-comma-separated-parameter: comma-separated-parameter .
   85 comma-separated-parameter: comma-separated-parameter . COMMA IDENTIFIER COLON IDENTIFIER

    COMMA  shift, and go to state 170

    $default  reduce using rule 83 (nullable-comma-separated-parameter)


State 150

   77 record-type: LBRACE . comma-separated-field RBRACE

    IDENTIFIER  shift, and go to state 171

    comma-separated-field  转到状态 172


State 151

   75 type: ARRAY . OF IDENTIFIER

    OF  shift, and go to state 173


State 152

   74 type: IDENTIFIER .

    $default  reduce using rule 74 (type)


State 153

   73 type-declaration: TYPE IDENTIFIER EQ type .

    $default  reduce using rule 73 (type-declaration)


State 154

   76 type: record-type .

    $default  reduce using rule 76 (type)


State 155

   88 nullable-colon-type: COLON IDENTIFIER .

    $default  reduce using rule 88 (nullable-colon-type)


State 156

   86 variable-declaration: VAR IDENTIFIER nullable-colon-type ASSIGN . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 174
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 157

   18 value-let-expression: LET space-separated-declaration IN semicolon-separated-expression-ended-with-value END .

    $default  reduce using rule 18 (value-let-expression)


State 158

   20 no-value-let-expression: LET space-separated-declaration IN semicolon-separated-expression-ended-with-no-value END .

    $default  reduce using rule 20 (no-value-let-expression)


State 159

   19 no-value-let-expression: LET space-separated-declaration IN nullable-semicolon-separated-expression-ended-with-no-value END .

    $default  reduce using rule 19 (no-value-let-expression)


State 160

   67 comma-separated-value-expression: comma-separated-value-expression COMMA value-expression .

    $default  reduce using rule 67 (comma-separated-value-expression)


State 161

   59 maybe-lvalue-expression: IDENTIFIER LBRACKET value-expression RBRACKET OF . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 175
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 162

   64 comma-separated-record-field: IDENTIFIER EQ value-expression .

    $default  reduce using rule 64 (comma-separated-record-field)


State 163

   65 comma-separated-record-field: comma-separated-record-field COMMA IDENTIFIER . EQ value-expression

    EQ  shift, and go to state 176


State 164

   23 semicolon-separated-expression-ended-with-value: semicolon-separated-expression-ended-with-value . SEMICOLON value-expression
   26 semicolon-separated-expression-ended-with-no-value: semicolon-separated-expression-ended-with-value . SEMICOLON no-value-expression

    SEMICOLON  shift, and go to state 75


State 165

   16 for: FOR IDENTIFIER ASSIGN value-expression TO value-expression . DO breakable-expression

    DO  shift, and go to state 177


State 166

   13 no-value-if-then-else: IF value-expression THEN no-value-expression ELSE no-value-expression .

    $default  reduce using rule 13 (no-value-if-then-else)


State 167

   14 value-if-then-else: IF value-expression THEN value-expression ELSE value-expression .

    $default  reduce using rule 14 (value-if-then-else)


State 168

   84 comma-separated-parameter: IDENTIFIER COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 178


State 169

   80 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN . COLON IDENTIFIER EQ value-expression
   81                     | FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN . EQ expression

    COLON  shift, and go to state 179
    EQ     shift, and go to state 180


State 170

   85 comma-separated-parameter: comma-separated-parameter COMMA . IDENTIFIER COLON IDENTIFIER

    IDENTIFIER  shift, and go to state 181


State 171

   78 comma-separated-field: IDENTIFIER . COLON IDENTIFIER

    COLON  shift, and go to state 182


State 172

   77 record-type: LBRACE comma-separated-field . RBRACE
   79 comma-separated-field: comma-separated-field . COMMA IDENTIFIER COLON IDENTIFIER

    RBRACE  shift, and go to state 183
    COMMA   shift, and go to state 184


State 173

   75 type: ARRAY OF . IDENTIFIER

    IDENTIFIER  shift, and go to state 185


State 174

   86 variable-declaration: VAR IDENTIFIER nullable-colon-type ASSIGN value-expression .

    $default  reduce using rule 86 (variable-declaration)


State 175

   59 maybe-lvalue-expression: IDENTIFIER LBRACKET value-expression RBRACKET OF value-expression .

    $default  reduce using rule 59 (maybe-lvalue-expression)


State 176

   65 comma-separated-record-field: comma-separated-record-field COMMA IDENTIFIER EQ . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 186
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 177

   16 for: FOR IDENTIFIER ASSIGN value-expression TO value-expression DO . breakable-expression

    LPAREN      shift, and go to state 1
    MINUS       shift, and go to state 2
    BREAK       shift, and go to state 131
    FOR         shift, and go to state 3
    IF          shift, and go to state 4
    LET         shift, and go to state 5
    NIL         shift, and go to state 6
    WHILE       shift, and go to state 7
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    expression                 转到状态 132
    breakable-expression       转到状态 187
    no-value-expression        转到状态 13
    no-value-if-then-else      转到状态 14
    value-if-then-else         转到状态 15
    if-then                    转到状态 16
    for                        转到状态 17
    while                      转到状态 18
    value-let-expression       转到状态 19
    no-value-let-expression    转到状态 20
    assignment-expression      转到状态 21
    value-expression           转到状态 22
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 31


State 178

   84 comma-separated-parameter: IDENTIFIER COLON IDENTIFIER .

    $default  reduce using rule 84 (comma-separated-parameter)


State 179

   80 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN COLON . IDENTIFIER EQ value-expression

    IDENTIFIER  shift, and go to state 188


State 180

   81 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN EQ . expression

    LPAREN      shift, and go to state 1
    MINUS       shift, and go to state 2
    FOR         shift, and go to state 3
    IF          shift, and go to state 4
    LET         shift, and go to state 5
    NIL         shift, and go to state 6
    WHILE       shift, and go to state 7
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    expression                 转到状态 189
    no-value-expression        转到状态 13
    no-value-if-then-else      转到状态 14
    value-if-then-else         转到状态 15
    if-then                    转到状态 16
    for                        转到状态 17
    while                      转到状态 18
    value-let-expression       转到状态 19
    no-value-let-expression    转到状态 20
    assignment-expression      转到状态 21
    value-expression           转到状态 22
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 31


State 181

   85 comma-separated-parameter: comma-separated-parameter COMMA IDENTIFIER . COLON IDENTIFIER

    COLON  shift, and go to state 190


State 182

   78 comma-separated-field: IDENTIFIER COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 191


State 183

   77 record-type: LBRACE comma-separated-field RBRACE .

    $default  reduce using rule 77 (record-type)


State 184

   79 comma-separated-field: comma-separated-field COMMA . IDENTIFIER COLON IDENTIFIER

    IDENTIFIER  shift, and go to state 192


State 185

   75 type: ARRAY OF IDENTIFIER .

    $default  reduce using rule 75 (type)


State 186

   65 comma-separated-record-field: comma-separated-record-field COMMA IDENTIFIER EQ value-expression .

    $default  reduce using rule 65 (comma-separated-record-field)


State 187

   16 for: FOR IDENTIFIER ASSIGN value-expression TO value-expression DO breakable-expression .

    $default  reduce using rule 16 (for)


State 188

   80 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN COLON IDENTIFIER . EQ value-expression

    EQ  shift, and go to state 193


State 189

   81 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN EQ expression .

    $default  reduce using rule 81 (function-declaration)


State 190

   85 comma-separated-parameter: comma-separated-parameter COMMA IDENTIFIER COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 194


State 191

   78 comma-separated-field: IDENTIFIER COLON IDENTIFIER .

    $default  reduce using rule 78 (comma-separated-field)


State 192

   79 comma-separated-field: comma-separated-field COMMA IDENTIFIER . COLON IDENTIFIER

    COLON  shift, and go to state 195


State 193

   80 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN COLON IDENTIFIER EQ . value-expression

    LPAREN      shift, and go to state 32
    MINUS       shift, and go to state 2
    IF          shift, and go to state 33
    LET         shift, and go to state 34
    NIL         shift, and go to state 6
    INT         shift, and go to state 8
    STRING      shift, and go to state 9
    IDENTIFIER  shift, and go to state 10

    value-if-then-else         转到状态 15
    value-let-expression       转到状态 19
    value-expression           转到状态 196
    logical-or-expression      转到状态 23
    logical-and-expression     转到状态 24
    equality-expression        转到状态 25
    additive-expression        转到状态 26
    multiplicative-expression  转到状态 27
    unary-expression           转到状态 28
    postfix-expression         转到状态 29
    maybe-lvalue-expression    转到状态 30
    lvalue-expression          转到状态 39


State 194

   85 comma-separated-parameter: comma-separated-parameter COMMA IDENTIFIER COLON IDENTIFIER .

    $default  reduce using rule 85 (comma-separated-parameter)


State 195

   79 comma-separated-field: comma-separated-field COMMA IDENTIFIER COLON . IDENTIFIER

    IDENTIFIER  shift, and go to state 197


State 196

   80 function-declaration: FUNCTION IDENTIFIER LPAREN nullable-comma-separated-parameter RPAREN COLON IDENTIFIER EQ value-expression .

    $default  reduce using rule 80 (function-declaration)


State 197

   79 comma-separated-field: comma-separated-field COMMA IDENTIFIER COLON IDENTIFIER .

    $default  reduce using rule 79 (comma-separated-field)
